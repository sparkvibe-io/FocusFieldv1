plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
    id "com.google.gms.google-services"
}

// Load Flutter-generated version info from local.properties
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localProperties.load(localPropertiesFile.newDataInputStream())
}
def flutterVersionCode = localProperties.getProperty('flutter.versionCode') ?: '1'
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: '1.0'

android {
    namespace "io.sparkvibe.focusfield"
    compileSdkVersion 36
    ndkVersion "27.0.12077973"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled true
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    // Load optional release keystore (not committed). Create android/key.properties with:
    // storeFile=../keystore.jks
    // storePassword=****
    // keyAlias=****
    // keyPassword=****
    def keystoreProperties = new Properties()
    def keystorePropertiesFile = rootProject.file("key.properties")
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }

    defaultConfig {
    applicationId "io.sparkvibe.focusfield"
        // Raised from 23 -> 24 due to purchases_ui_flutter plugin requirement
        minSdkVersion 24
        targetSdkVersion 36
    // Set explicitly to satisfy bundle packaging; values originate from pubspec.yaml -> local.properties
    versionCode flutterVersionCode.toInteger()
    versionName flutterVersionName
    }

    if (!keystorePropertiesFile.exists()) {
        throw new GradleException("Release keystore config missing: create android/key.properties (see key.properties.example) before building release.")
    } else {
        // Validate keystore file path from properties
        def storeFilePath = keystoreProperties['storeFile']
        if (storeFilePath == null || storeFilePath.trim().isEmpty()) {
            throw new GradleException("key.properties is missing 'storeFile' entry. See android/key.properties.example")
        }
        def storeFileResolved = file(storeFilePath)
        if (!storeFileResolved.exists()) {
            throw new GradleException("Keystore file not found: '${storeFilePath}'. Place your keystore under android/ and update android/key.properties. See android/key.properties.example")
        }
    }

    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.1.4'
}